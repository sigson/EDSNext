apply plugin: 'com.android.application'
apply plugin: 'maven-publish'
//apply plugin: 'android-cq'

android {

    compileSdkVersion 28

    defaultConfig {
        applicationId "com.sovworks.eds.android"
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 237
        versionName "2.0.0.237"
        multiDexEnabled true


        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a'
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

	signingConfigs {
        debug {
            storeFile file('../misc/keys.keystore')
            storePassword 'android'
            keyAlias 'eds-debug-key'
            keyPassword 'android'
        }
    }    

    flavorDimensions "fullOrLite", "licCheckType", "inet", "fsm"

    productFlavors {
        
        lite {
            dimension "fullOrLite"
            applicationId "com.sovworks.edslite"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules-lite.pro'
            externalNativeBuild {
                cmake {
                    targets "edsxts", "edsctr", "edsaes", "edsserpent", "edstwofish", "edsripemd160", "edswhirlpool", "fdraio", "localxts", "edscfb", "edscbc", "edsctr", "edsgost"
                }
            }
        }
        licCheckNone {
            dimension "licCheckType"
        }
        noinet {
            dimension "inet"
        }
        nofsml {
            dimension "fsm"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if ((names.contains("lite") && !names.contains("licCheckNone")) ||
                (names.contains("full") && names.contains("licCheckNone")) ||
                (names.contains("inet") && !names.contains("full")) ||
                (names.contains("fsm") && !names.contains("full")) ||
                (names.contains("nofsm") && !names.contains("full")) ||
                (names.contains("fsm") && !names.contains("inet")) ||
                (names.contains("fsm") && !names.contains("licCheckGP")) ||
                (names.contains("nofsml") && !names.contains("lite"))

        ) {
            setIgnore(true)
        }
    }

    buildTypes {
        
        debug {
            signingConfig signingConfigs.debug
            externalNativeBuild {

                cmake {
                    cFlags "-DDEBUG"
                }
            }
            debuggable true
            jniDebuggable true
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
          //checkReleaseBuilds false
          abortOnError false
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = outputFileName.replace("app-", "EDS-").replace(".apk", "-v${variant.versionName}.apk")
        }
    }

    externalNativeBuild {

        cmake {
           path "CMakeLists.txt"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations {

}

dependencies {
    implementation 'com.drewnoakes:metadata-extractor:2.12.0'
    implementation 'com.android.support:design:28.0.0'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.1'

    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.2'
    // If you want to bind to Android-specific lifecycles
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.2'
    // If you want pre-written Activities and Fragments you can subclass as providers
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.2'
    implementation 'com.android.support:exifinterface:28.0.0'

    // print dependency tree:
    // ./gradlew primitiveFTPd:dependencies --configuration releaseCompileClasspath
    implementation project(':pftpd-pojo-lib')
    implementation project(':slf4j-android-1.6.1-RC1')
    implementation project(':apache-ftpserver-1.1.1-core')
    implementation project(':apache-ftpserver-1.1.1-ftplet-api')
    implementation project(':sshd-core-0.14.0')
    implementation 'org.apache.mina:mina-core:2.1.6'
    implementation 'org.greenrobot:eventbus:3.2.0'

    implementation 'eu.chainfire:libsuperuser:1.0.0.201704021214'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.0'
    implementation('me.dm7.barcodescanner:zxing:1.9.8') {
        exclude group: 'com.android.support'
    }
    implementation 'org.bouncycastle:bcpg-jdk15on:1.70'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
}
apply from: 'build-full.gradle'

if (file('build-local').exists()) {
	apply from: 'build-local.gradle'
}

configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == "com.android.support") {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion "26.+"
            }
        }
    }
}
